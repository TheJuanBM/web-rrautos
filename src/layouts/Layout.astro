---
import '../styles/global.css'
import SEOHead, { type SEOProps } from '../components/SEOHead.astro'

interface Props extends SEOProps {}

const seoProps = Astro.props
---

<!doctype html>
<html lang="es" dir="ltr">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />

    <!-- SEO y metadatos -->
    <SEOHead {...seoProps} />

    <!-- Web App Manifest -->
    <link rel="manifest" href="/manifest.json" />

    <!-- Preload critical resources -->
    <link rel="dns-prefetch" href="https://api-ecommerce.hostinger.com" />
    <link rel="preconnect" href="https://api-ecommerce.hostinger.com" crossorigin />

    <!-- Critical CSS inline para mejorar performance -->
    <style>
      /* Critical styles para evitar FOUC */
      body {
        font-family:
          system-ui,
          -apple-system,
          sans-serif;
        line-height: 1.6;
        color: #111827;
        background-color: #ffffff;
      }

      .sr-only {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border: 0;
      }

      .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
      }

      /* Focus visible para mejor accesibilidad */
      .focus-visible {
        outline: 2px solid #2563eb;
        outline-offset: 2px;
      }
    </style>
  </head>
  <body>
    <!-- Skip to main content para accesibilidad -->
    <a
      href="#main-content"
      class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-blue-600 px-4 py-2 rounded-md z-50"
    >
      Saltar al contenido principal
    </a>

    <main id="main-content" role="main">
      <slot />
    </main>

    <!-- Performance monitoring básico -->
    <script>
      // Monitoreo básico de rendimiento
      window.addEventListener('load', () => {
        // Métricas básicas de tiempo de carga
        try {
          // if (performance && performance.timing) {
          //   const timing = performance.timing
          //   const loadTime = timing.loadEventEnd - timing.navigationStart
          //   console.log('Tiempo de carga total:', loadTime + 'ms') // TODO: Remove this
          // }
          // Observar LCP si está disponible
          // if ('PerformanceObserver' in window) {
          //   const observer = new PerformanceObserver((list) => {
          //     const entries = list.getEntries()
          //     for (const entry of entries) {
          //       console.log('LCP:', entry.startTime + 'ms') // TODO: Remove this
          //     }
          //   })
          //   observer.observe({ entryTypes: ['largest-contentful-paint'] })
          // }
        } catch (e) {
          console.error('Performance monitoring no disponible', e)
        }
      })
    </script>
  </body>
</html>

<style>
  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;
  }
</style>
