---
import OptimizedImage from './OptimizedImage.astro'

interface CarouselImage {
  id?: string
  url: string
  alt?: string | null
}

interface Props {
  images?: CarouselImage[]
  title: string
}

const { images = [], title } = Astro.props
const validImages = images.filter(image => Boolean(image?.url))
const thumbImages = validImages.slice(0, 4)
const extraImagesCount = Math.max(validImages.length - thumbImages.length, 0)
const locals = (Astro.locals ?? {}) as Record<string, unknown>
const requestId = typeof locals.requestId === 'string' ? locals.requestId : null
const carouselId = `carousel-${requestId ?? Math.random().toString(36).slice(2, 8)}`
---

{
  validImages.length > 0 && (
    <div
      class="carousel"
      data-carousel
      data-carousel-id={carouselId}
      aria-label={`Galería de imágenes de ${title}`}
      tabindex="-1"
      data-carousel-trigger-index={extraImagesCount > 0 ? String(thumbImages.length - 1) : undefined}
    >
      <div class="carousel__backdrop" data-carousel-backdrop aria-hidden="true" />
      <button
        type="button"
        class="carousel__fullscreen-close"
        data-carousel-close
        aria-label="Cerrar galería a pantalla completa"
      >
        &times;
      </button>
      <div class="carousel__stage">
        <div class="carousel__viewport" data-carousel-viewport>
          {validImages.map((image, index) => (
            <article
              class:list={{ carousel__slide: true, 'is-active': index === 0 }}
              data-carousel-slide
              data-index={index}
              role="tabpanel"
              aria-roledescription="slide"
              aria-label={`Imagen ${index + 1} de ${validImages.length}`}
            >
              <div class="carousel__media">
                <OptimizedImage
                  src={image.url}
                  alt={image.alt ?? `${title} - imagen ${index + 1}`}
                  width={600}
                  height={750}
                  class="carousel__image"
                  priority={index === 0}
                />
              </div>
            </article>
          ))}
        </div>
        {validImages.length > 1 && (
          <div class="carousel__slide-controls">
            <button
              class="carousel__control carousel__control--prev"
              type="button"
              data-carousel-prev
              aria-label="Imagen anterior"
            >
              <span aria-hidden="true">◀</span>
            </button>
            <button
              class="carousel__control carousel__control--next"
              type="button"
              data-carousel-next
              aria-label="Imagen siguiente"
            >
              <span aria-hidden="true">▶</span>
            </button>
          </div>
        )}
      </div>
      {validImages.length > 1 && (
        <div class="carousel__thumbs" role="tablist" aria-label="Miniaturas de la galería">
          {thumbImages.map((image, index) => {
            const isLastVisible = index === thumbImages.length - 1
            const showExtraBadge = extraImagesCount > 0 && isLastVisible

            return (
              <button
                type="button"
                class:list={{ carousel__thumb: true, 'is-active': index === 0 }}
                data-carousel-thumb
                data-index={index}
                role="tab"
                aria-selected={index === 0}
                aria-controls={`${carouselId}-panel-${index}`}
                aria-label={`${
                  image.alt ?? `${title} - miniatura ${index + 1}`
                }${showExtraBadge ? ` y ${extraImagesCount} imágenes adicionales` : ''}`}
              >
                <OptimizedImage
                  src={image.url}
                  alt={image.alt ?? `${title} - miniatura ${index + 1}`}
                  width={130}
                  height={160}
                  class="carousel__thumb-image"
                />
                {showExtraBadge && (
                  <div class="carousel__thumb-extra" aria-hidden="true" title="Ver más imágenes">
                    <span>+{extraImagesCount}</span>
                  </div>
                )}
              </button>
            )
          })}
        </div>
      )}
    </div>
  )
}

<script>
  const hydrators = new Set()

  function initCarousel(root: HTMLElement | null) {
    if (!root || root.dataset.carouselInitialized) return
    const viewport = root.querySelector<HTMLElement>('[data-carousel-viewport]')
    const slides = Array.from(root.querySelectorAll<HTMLElement>('[data-carousel-slide]'))
    const prevButtons = Array.from(root.querySelectorAll<HTMLButtonElement>('[data-carousel-prev]'))
    const nextButtons = Array.from(root.querySelectorAll<HTMLButtonElement>('[data-carousel-next]'))
    const thumbButtons = Array.from(root.querySelectorAll<HTMLButtonElement>('[data-carousel-thumb]'))
    const closeButton = root.querySelector<HTMLButtonElement>('[data-carousel-close]')
    const backdrop = root.querySelector<HTMLElement>('[data-carousel-backdrop]')
    const triggerIndexAttr = root.dataset.carouselTriggerIndex
    const triggerIndex = Number.isInteger(Number(triggerIndexAttr)) ? Number(triggerIndexAttr) : null
    const originalParent = root.parentNode
    let placeholder: Comment | null = null

    if (!viewport || slides.length === 0) {
      root.dataset.carouselInitialized = 'true'
      return
    }

    let current = 0
    const total = slides.length
    let isProgrammaticScroll = false
    let scrollDebounceId: number | undefined
    let scrollResetTimeout: number | undefined
    let isFullscreen = root.classList.contains('is-fullscreen')

    function lockBodyScroll() {
      if (document.body.dataset.carouselScrollLock != null) return
      document.body.dataset.carouselScrollLock = document.body.style.overflow || ''
      document.body.style.overflow = 'hidden'
    }

    function unlockBodyScroll() {
      const activeFullscreenCarousel = document.querySelector('[data-carousel].is-fullscreen')
      if (!activeFullscreenCarousel) {
        const previousOverflow = document.body.dataset.carouselScrollLock ?? ''
        document.body.style.overflow = previousOverflow
        delete document.body.dataset.carouselScrollLock
      }
    }

    function ensureImageLoaded(index: number) {
      const slide = slides[index]
      if (!slide) return
      const image = slide.querySelector<HTMLImageElement>('img')
      if (!image || image.dataset.preloaded === 'true') return
      image.dataset.preloaded = 'true'
      image.loading = 'eager'
      image.decoding = 'async'
    }

    function scrollToCurrent(instant = false) {
      const target = slides[current]
      if (!viewport || !target) return
      isProgrammaticScroll = true
      viewport.scrollTo({ left: target.offsetLeft, behavior: instant ? 'auto' : 'smooth' })
      window.clearTimeout(scrollResetTimeout)
      scrollResetTimeout = window.setTimeout(
        () => {
          isProgrammaticScroll = false
        },
        instant ? 60 : 420
      )
    }

    function update(newIndex: number, options: { scroll?: boolean; instant?: boolean } = {}) {
      const { scroll = true, instant = false } = options
      current = (newIndex + total) % total

      slides.forEach((slide, index) => {
        const isActive = index === current
        slide.classList.toggle('is-active', isActive)
        slide.setAttribute('aria-hidden', isActive ? 'false' : 'true')
        slide.id = `${root!.dataset.carouselId}-panel-${index}`
        slide.setAttribute('tabindex', isActive ? '0' : '-1')
      })

      thumbButtons.forEach((thumb, index) => {
        const isActive = index === current
        thumb.classList.toggle('is-active', isActive)
        thumb.setAttribute('aria-selected', String(isActive))
      })

      ensureImageLoaded(current)
      if (total > 1) {
        ensureImageLoaded((current + 1) % total)
        ensureImageLoaded((current - 1 + total) % total)
      }

      if (scroll) {
        scrollToCurrent(instant)
      }
    }

    function handlePrev(event?: Event) {
      event?.preventDefault()
      update(current - 1)
    }

    function handleNext(event?: Event) {
      event?.preventDefault()
      update(current + 1)
    }

    function handleKeydown(event: KeyboardEvent) {
      if (event.key === 'ArrowLeft') {
        event.preventDefault()
        handlePrev()
      }
      if (event.key === 'ArrowRight') {
        event.preventDefault()
        handleNext()
      }
      if (event.key === 'Escape' && isFullscreen) {
        event.preventDefault()
        exitFullscreen({ returnFocus: true })
      }
    }

    function handleScroll() {
      if (isProgrammaticScroll) return
      window.clearTimeout(scrollDebounceId)
      scrollDebounceId = window.setTimeout(() => {
        const midpoint = viewport!.scrollLeft + viewport!.clientWidth / 2
        let nearestIndex = current
        let minDistance = Number.POSITIVE_INFINITY

        slides.forEach((slide, index) => {
          const slideCenter = slide.offsetLeft + slide.offsetWidth / 2
          const distance = Math.abs(midpoint - slideCenter)
          if (distance < minDistance) {
            minDistance = distance
            nearestIndex = index
          }
        })

        if (nearestIndex !== current) {
          update(nearestIndex, { scroll: false })
        }
      }, 80)
    }

    function enterFullscreen() {
      if (isFullscreen || !root) return
      isFullscreen = true
      root.classList.add('is-fullscreen')
      root.setAttribute('role', 'dialog')
      root.setAttribute('aria-modal', 'true')
      lockBodyScroll()
      if (root!.parentNode !== document.body) {
        placeholder = document.createComment('carousel-placeholder')
        originalParent?.insertBefore(placeholder, root)
        document.body.appendChild(root)
      }
      window.requestAnimationFrame(() => {
        scrollToCurrent(true)
        root!.focus({ preventScroll: true })
      })
    }

    function exitFullscreen({ returnFocus = false }: { returnFocus?: boolean } = {}) {
      if (!isFullscreen || !root) return
      isFullscreen = false
      root!.classList.remove('is-fullscreen')
      root!.removeAttribute('role')
      root!.removeAttribute('aria-modal')
      unlockBodyScroll()
      if (placeholder && placeholder.parentNode && originalParent) {
        originalParent.insertBefore(root, placeholder)
        originalParent.removeChild(placeholder)
        placeholder = null
      }
      if (returnFocus) {
        const activeThumb = thumbButtons[current]
        activeThumb?.focus({ preventScroll: true })
      }
    }

    prevButtons.forEach(button => button.addEventListener('click', handlePrev))
    nextButtons.forEach(button => button.addEventListener('click', handleNext))
    closeButton?.addEventListener('click', () => exitFullscreen({ returnFocus: true }))
    backdrop?.addEventListener('click', () => exitFullscreen())
    root.addEventListener('keydown', handleKeydown)
    viewport.addEventListener('scroll', handleScroll, { passive: true })

    thumbButtons.forEach(thumb => {
      thumb.addEventListener('click', () => {
        const index = Number.parseInt(thumb.dataset.index || '0', 10)
        update(index)

        if (!isFullscreen && triggerIndex != null && index === triggerIndex) {
          enterFullscreen()
          root.dispatchEvent(
            new CustomEvent('carousel:fullscreen', {
              bubbles: true,
              detail: { index, total },
            })
          )
        }
      })
    })

    update(0, { scroll: true, instant: true })
    root.dataset.carouselInitialized = 'true'
  }

  function hydrateAllCarousels() {
    const carousels = document.querySelectorAll<HTMLElement>('[data-carousel]')
    carousels.forEach(element => initCarousel(element))
  }

  if (!hydrators.size) {
    const handler = () => requestAnimationFrame(hydrateAllCarousels)
    hydrators.add(handler)
    document.addEventListener('astro:page-load', handler)
    document.addEventListener('astro:after-swap', handler)
    handler()
  } else {
    hydrateAllCarousels()
  }
</script>

<style>
  .carousel {
    position: relative;
    display: flex;
    gap: 0.75rem;
    overflow: hidden;
    flex-direction: column;
    z-index: 1;
    width: 100%;
  }

  .carousel.is-fullscreen {
    position: fixed;
    inset: 0;
    z-index: 2147483646;
    padding: clamp(1rem, 4vw, 2.5rem) clamp(1rem, 6vw, 3.5rem);
    background: rgba(10, 12, 20, 0.92);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: clamp(1rem, 2.6vw, 1.6rem);
    pointer-events: auto;
  }

  .carousel__backdrop {
    position: absolute;
    inset: 0;
    background: rgba(15, 23, 42, 0.9);
    opacity: 0;
    transition: opacity 0.25s ease;
    pointer-events: none;
    z-index: 0;
  }

  .carousel.is-fullscreen .carousel__backdrop {
    opacity: 1;
    pointer-events: auto;
  }

  .carousel__fullscreen-close {
    position: absolute;
    top: clamp(1rem, 4vw, 2.5rem);
    right: clamp(1rem, 4vw, 2.5rem);
    width: clamp(2.4rem, 5vw, 3.2rem);
    height: clamp(2.4rem, 5vw, 3.2rem);
    border-radius: 999px;
    border: none;
    background: rgba(15, 23, 42, 0.75);
    color: white;
    font-size: clamp(1.6rem, 3.4vw, 2.2rem);
    line-height: 1;
    cursor: pointer;
    display: none;
    align-items: center;
    justify-items: center;
    justify-content: center;
    z-index: 2;
    box-shadow: 0 12px 32px -14px rgba(15, 23, 42, 0.65);
    transition:
      transform 0.2s ease,
      background 0.2s ease;
  }

  .carousel.is-fullscreen .carousel__fullscreen-close {
    display: inline-flex;
    z-index: 1;
  }

  .carousel.is-fullscreen .carousel__fullscreen-close:hover,
  .carousel.is-fullscreen .carousel__fullscreen-close:focus-visible {
    transform: scale(1.05);
    background: rgba(15, 23, 42, 0.9);
  }

  .carousel__stage {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
    z-index: 1;
    border-radius: 1.25rem;
    overflow: hidden;
  }

  .carousel.is-fullscreen .carousel__stage {
    width: min(92vw, 600px);
    gap: clamp(0.75rem, 2vw, 1.25rem);
    justify-content: center;
  }

  .carousel__viewport {
    display: flex;
    flex-wrap: nowrap;
    overflow: hidden;
    scroll-snap-type: x mandatory;
    overflow: hidden;
    position: relative;
    width: 100%;
    max-width: 770px;
    height: 500px;
    background: linear-gradient(135deg, rgba(15, 23, 42, 0.85), rgba(15, 23, 42, 0.55));
    scrollbar-width: none;
    -ms-overflow-style: none;
    transition:
      width 0.25s ease,
      height 0.25s ease,
      border-radius 0.25s ease,
      background 0.25s ease,
      box-shadow 0.25s ease;
  }

  .carousel.is-fullscreen .carousel__viewport {
    width: min(92vw, 1200px);
    height: min(78vh, 500px);
    border-radius: 1rem;
    background: rgba(0, 0, 0, 0.88);
    box-shadow: 0 35px 120px -60px rgba(0, 0, 0, 0.85);
  }

  .carousel__viewport::-webkit-scrollbar {
    display: none;
  }

  .carousel__slide {
    flex: 0 0 100%;
    scroll-snap-align: center;
    position: relative;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: opacity 0.25s ease;
    background-color: #000;
  }

  .carousel__slide.is-active {
    opacity: 1;
  }

  .carousel__media {
    position: relative;
    overflow: hidden;
    border-radius: 1.25rem;
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: clamp(200px, 40vw, 420px);
  }

  .carousel.is-fullscreen .carousel__media {
    height: 100%;
    border-radius: 0.85rem;
    background: linear-gradient(180deg, rgba(12, 14, 22, 0.7), rgba(12, 14, 22, 0.4));
  }

  .carousel__image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  .carousel.is-fullscreen .carousel__image {
    object-fit: contain;
    background-color: rgba(8, 10, 18, 0.85);
    border-radius: 0.75rem;
  }

  .carousel__slide-controls {
    position: absolute;
    inset: 0;
    height: 100%;
    max-height: 500px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    pointer-events: none;
    padding: 0.75rem;
  }

  .carousel.is-fullscreen .carousel__slide-controls {
    width: 100%;
    height: 100%;
    padding: clamp(0.6rem, 2.2vw, 1.8rem);
    background: linear-gradient(90deg, rgba(0, 0, 0, 0.2), transparent, rgba(0, 0, 0, 0.2));
  }

  .carousel__control {
    pointer-events: auto;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 2.4rem;
    height: 2.4rem;
    border-radius: 999px;
    border: 1px solid rgba(255, 255, 255, 0.35);
    background: rgba(15, 23, 42, 0.55);
    color: white;
    cursor: pointer;
    transition:
      background 0.2s ease,
      transform 0.2s ease;
  }

  .carousel.is-fullscreen .carousel__control {
    width: clamp(2.75rem, 4vw, 3.25rem);
    height: clamp(2.75rem, 4vw, 3.25rem);
    font-size: clamp(1rem, 2vw, 1.3rem);
  }

  .carousel__control:hover,
  .carousel__control:focus-visible {
    background: rgba(15, 23, 42, 0.75);
    transform: scale(1.05);
  }

  .carousel__thumbs {
    display: flex;
    gap: 6.3px;
  }

  .carousel.is-fullscreen .carousel__thumbs {
    display: none;
  }

  .carousel__thumb {
    display: flex;
    align-items: center;
    justify-content: center;
    border: 0;
    padding: 0;
    height: 120px;
    border-radius: 1rem;
    overflow: hidden;
    background: rgba(148, 163, 184, 0.25);
    cursor: pointer;
    border: 1px solid transparent;
    transition:
      transform 0.2s ease,
      border-color 0.2s ease,
      box-shadow 0.2s ease;
    position: relative;
  }

  .carousel.is-fullscreen .carousel__thumb {
    height: clamp(86px, 11vw, 120px);
    border-radius: clamp(0.65rem, 1.4vw, 0.95rem);
    background: rgba(15, 23, 42, 0.4);
    backdrop-filter: blur(5px);
  }

  .carousel__thumb.is-active {
    border-color: rgba(59, 130, 246, 0.75);
    box-shadow: 0 12px 22px -18px rgba(30, 64, 175, 0.45);
  }

  .carousel__thumb-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    aspect-ratio: 4 / 3;
  }

  .carousel.is-fullscreen .carousel__thumb-image {
    object-fit: cover;
    filter: saturate(0.9);
  }

  .carousel__thumb-extra {
    position: absolute;
    inset: 0;
    display: grid;
    place-items: center;
    background: rgba(15, 23, 42, 0.8);
    color: white;
    font-weight: 600;
    font-size: 1rem;
    letter-spacing: 0.04em;
    position: absolute;
  }

  @media (max-width: 1000px) {
    .carousel {
      flex-direction: row;
    }

    .carousel__thumbs {
      flex-direction: column;
    }
  }

  @media (max-width: 640px) {
    .carousel__slide-controls {
      padding: 0.5rem;
    }

    .carousel__control {
      width: 2.1rem;
      height: 2.1rem;
    }
  }

  @media (max-width: 768px) {
    .carousel {
      flex-direction: column;
    }

    .carousel__thumbs {
      flex-direction: row;
    }

    .carousel__slide,
    .carousel__viewport {
      max-height: 350px;
    }
  }

  @media (max-width: 520px) {
    .carousel__media {
      min-height: clamp(180px, 55vw, 320px);
    }

    .carousel__thumb {
      height: 90px;
    }
  }
</style>
