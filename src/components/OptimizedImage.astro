---
interface Props {
  src: string
  alt: string
  width?: number
  height?: number
  loading?: 'lazy' | 'eager'
  decoding?: 'sync' | 'async' | 'auto'
  class?: string
  sizes?: string
  quality?: number
  priority?: boolean
  fetchpriority?: 'high' | 'low' | 'auto'
}

const {
  src,
  alt,
  width,
  height,
  loading = 'lazy',
  decoding = 'async',
  class: className,
  sizes,
  quality = 80,
  priority = false,
  fetchpriority = 'auto',
} = Astro.props

const defaultSizes = sizes || '(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 25vw'
const widths = [320, 480, 640, 768, 1024, 1280, 1600, 1920]

function buildImageUrl(baseSrc: string, targetWidth?: number): string {
  if (!baseSrc) return ''

  const baseOrigin = Astro.site || Astro.url?.origin || undefined
  try {
    const url = new URL(baseSrc, baseOrigin)

    if (typeof targetWidth === 'number' && targetWidth > 0) {
      url.searchParams.set('w', String(targetWidth))
    }

    url.searchParams.set('q', String(quality))
    return url.toString()
  } catch {
    const separator = baseSrc.includes('?') ? '&' : '?'
    const widthParam = targetWidth ? `w=${targetWidth}&` : ''
    return `${baseSrc}${separator}${widthParam}q=${quality}`
  }
}

const normalizedSrc = buildImageUrl(src, width)
const srcSetEntries = widths
  .concat(width && !widths.includes(width) ? [width] : [])
  .sort((a, b) => a - b)
  .map(currentWidth => {
    const candidate = buildImageUrl(src, currentWidth)
    return candidate ? `${candidate} ${currentWidth}w` : ''
  })
  .filter(Boolean)

const srcSet = srcSetEntries.join(', ')
const finalSrc = normalizedSrc || src
const finalFetchPriority = priority ? 'high' : fetchpriority
---

<img
  src={finalSrc}
  srcset={srcSet || undefined}
  sizes={defaultSizes}
  alt={alt}
  width={width}
  height={height}
  loading={priority ? 'eager' : loading}
  decoding={decoding}
  class={className}
  fetchpriority={finalFetchPriority === 'auto' ? undefined : finalFetchPriority}
  referrerpolicy="no-referrer"
  onerror="this.style.display='none'"
  onload="this.style.opacity='1'"
  style="opacity: 0; transition: opacity 0.3s ease-in-out;"
/>
